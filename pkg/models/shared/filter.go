// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type Filter1TypeEnum string

const (
	Filter1TypeEnumEquals Filter1TypeEnum = "equals"
)

func (e *Filter1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "equals":
		*e = Filter1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Filter1TypeEnum: %s", s)
	}
}

type Filter1 struct {
	Type  Filter1TypeEnum `json:"type"`
	Value string          `json:"value"`
}

type FilterType string

const (
	FilterTypeFilter1 FilterType = "filter_1"
)

type Filter struct {
	Filter1 *Filter1

	Type FilterType
}

func CreateFilterFilter1(filter1 Filter1) Filter {
	typ := FilterTypeFilter1

	return Filter{
		Filter1: &filter1,
		Type:    typ,
	}
}

func (u *Filter) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	filter1 := new(Filter1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&filter1); err == nil {
		u.Filter1 = filter1
		u.Type = FilterTypeFilter1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Filter) MarshalJSON() ([]byte, error) {
	if u.Filter1 != nil {
		return json.Marshal(u.Filter1)
	}

	return nil, nil
}
